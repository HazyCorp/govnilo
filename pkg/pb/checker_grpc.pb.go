// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: checker.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CheckerServiceClient is the client API for CheckerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckerServiceClient interface {
	SetCheckerState(ctx context.Context, in *SetCheckerStateReq, opts ...grpc.CallOption) (*SetCheckerStateRsp, error)
	GetCheckerState(ctx context.Context, in *GetCheckerStateReq, opts ...grpc.CallOption) (*GetCheckerStateRsp, error)
	GetSLA(ctx context.Context, in *GetSLAReq, opts ...grpc.CallOption) (*GetSLAResponse, error)
}

type checkerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckerServiceClient(cc grpc.ClientConnInterface) CheckerServiceClient {
	return &checkerServiceClient{cc}
}

func (c *checkerServiceClient) SetCheckerState(ctx context.Context, in *SetCheckerStateReq, opts ...grpc.CallOption) (*SetCheckerStateRsp, error) {
	out := new(SetCheckerStateRsp)
	err := c.cc.Invoke(ctx, "/pb.CheckerService/SetCheckerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerServiceClient) GetCheckerState(ctx context.Context, in *GetCheckerStateReq, opts ...grpc.CallOption) (*GetCheckerStateRsp, error) {
	out := new(GetCheckerStateRsp)
	err := c.cc.Invoke(ctx, "/pb.CheckerService/GetCheckerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerServiceClient) GetSLA(ctx context.Context, in *GetSLAReq, opts ...grpc.CallOption) (*GetSLAResponse, error) {
	out := new(GetSLAResponse)
	err := c.cc.Invoke(ctx, "/pb.CheckerService/GetSLA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckerServiceServer is the server API for CheckerService service.
// All implementations must embed UnimplementedCheckerServiceServer
// for forward compatibility
type CheckerServiceServer interface {
	SetCheckerState(context.Context, *SetCheckerStateReq) (*SetCheckerStateRsp, error)
	GetCheckerState(context.Context, *GetCheckerStateReq) (*GetCheckerStateRsp, error)
	GetSLA(context.Context, *GetSLAReq) (*GetSLAResponse, error)
	mustEmbedUnimplementedCheckerServiceServer()
}

// UnimplementedCheckerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCheckerServiceServer struct {
}

func (UnimplementedCheckerServiceServer) SetCheckerState(context.Context, *SetCheckerStateReq) (*SetCheckerStateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCheckerState not implemented")
}
func (UnimplementedCheckerServiceServer) GetCheckerState(context.Context, *GetCheckerStateReq) (*GetCheckerStateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckerState not implemented")
}
func (UnimplementedCheckerServiceServer) GetSLA(context.Context, *GetSLAReq) (*GetSLAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSLA not implemented")
}
func (UnimplementedCheckerServiceServer) mustEmbedUnimplementedCheckerServiceServer() {}

// UnsafeCheckerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckerServiceServer will
// result in compilation errors.
type UnsafeCheckerServiceServer interface {
	mustEmbedUnimplementedCheckerServiceServer()
}

func RegisterCheckerServiceServer(s grpc.ServiceRegistrar, srv CheckerServiceServer) {
	s.RegisterService(&CheckerService_ServiceDesc, srv)
}

func _CheckerService_SetCheckerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCheckerStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerServiceServer).SetCheckerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CheckerService/SetCheckerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerServiceServer).SetCheckerState(ctx, req.(*SetCheckerStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckerService_GetCheckerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckerStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerServiceServer).GetCheckerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CheckerService/GetCheckerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerServiceServer).GetCheckerState(ctx, req.(*GetCheckerStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckerService_GetSLA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSLAReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerServiceServer).GetSLA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CheckerService/GetSLA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerServiceServer).GetSLA(ctx, req.(*GetSLAReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckerService_ServiceDesc is the grpc.ServiceDesc for CheckerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CheckerService",
	HandlerType: (*CheckerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetCheckerState",
			Handler:    _CheckerService_SetCheckerState_Handler,
		},
		{
			MethodName: "GetCheckerState",
			Handler:    _CheckerService_GetCheckerState_Handler,
		},
		{
			MethodName: "GetSLA",
			Handler:    _CheckerService_GetSLA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checker.proto",
}
